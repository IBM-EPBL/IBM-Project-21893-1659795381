{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset204 Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 PROJECT DEVELOPMENT-SP 2\par
\{\par
 "cells": [\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 4,\par
   "id": "0d7f4437",\par
   "metadata": \{\},\par
   "outputs": [],\par
   "source": [\par
    "import numpy as \f1\lang1049\'ef\'f0\\n",\par
    "import pandas as pd"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 5,\par
   "id": "a84ec787",\par
   "metadata": \{\},\par
   "outputs": [\par
    \{\par
     "data": \{\par
      "text/html": [\par
       "<div>\\n",\par
       "<style scoped>\\n",\par
       "    .dataframe tbody tr th:only-of-type \{\\n",\par
       "        vertical-align: middle;\\n",\par
       "    \}\\n",\par
       "\\n",\par
       "    .dataframe tbody tr th \{\\n",\par
       "        vertical-align: top;\\n",\par
       "    \}\\n",\par
       "\\n",\par
       "    .dataframe thead th \{\\n",\par
       "        text-align: right;\\n",\par
       "    \}\\n",\par
       "</style>\\n",\par
       "<table border=\\"1\\" class=\\"dataframe\\">\\n",\par
       "  <thead>\\n",\par
       "    <tr style=\\"text-align: right;\\">\\n",\par
       "      <th></th>\\n",\par
       "      <th>mpg</th>\\n",\par
       "      <th>cylinders</th>\\n",\par
       "      <th>displacement</th>\\n",\par
       "      <th>horsepower</th>\\n",\par
       "      <th>weight</th>\\n",\par
       "      <th>acceleration</th>\\n",\par
       "      <th>model year</th>\\n",\par
       "      <th>origin</th>\\n",\par
       "      <th>car name</th>\\n",\par
       "    </tr>\\n",\par
       "  </thead>\\n",\par
       "  <tbody>\\n",\par
       "    <tr>\\n",\par
       "      <th>0</th>\\n",\par
       "      <td>18.0</td>\\n",\par
       "      <td>8</td>\\n",\par
       "      <td>307.0</td>\\n",\par
       "      <td>130</td>\\n",\par
       "      <td>3504</td>\\n",\par
       "      <td>12.0</td>\\n",\par
       "      <td>70</td>\\n",\par
       "      <td>1</td>\\n",\par
       "      <td>chevrolet chevelle malibu</td>\\n",\par
       "    </tr>\\n",\par
       "    <tr>\\n",\par
       "      <th>1</th>\\n",\par
       "      <td>15.0</td>\\n",\par
       "      <td>8</td>\\n",\par
       "      <td>350.0</td>\\n",\par
       "      <td>165</td>\\n",\par
       "      <td>3693</td>\\n",\par
       "      <td>11.5</td>\\n",\par
       "      <td>70</td>\\n",\par
       "      <td>1</td>\\n",\par
       "      <td>buick skylark 320</td>\\n",\par
       "    </tr>\\n",\par
       "    <tr>\\n",\par
       "      <th>2</th>\\n",\par
       "      <td>18.0</td>\\n",\par
       "      <td>8</td>\\n",\par
       "      <td>318.0</td>\\n",\par
       "      <td>150</td>\\n",\par
       "      <td>3436</td>\\n",\par
       "      <td>11.0</td>\\n",\par
       "      <td>70</td>\\n",\par
       "      <td>1</td>\\n",\par
       "      <td>plymouth satellite</td>\\n",\par
       "    </tr>\\n",\par
       "    <tr>\\n",\par
       "      <th>3</th>\\n",\par
       "      <td>16.0</td>\\n",\par
       "      <td>8</td>\\n",\par
       "      <td>304.0</td>\\n",\par
       "      <td>150</td>\\n",\par
       "      <td>3433</td>\\n",\par
       "      <td>12.0</td>\\n",\par
       "      <td>70</td>\\n",\par
       "      <td>1</td>\\n",\par
       "      <td>amc rebel sst</td>\\n",\par
       "    </tr>\\n",\par
       "    <tr>\\n",\par
       "      <th>4</th>\\n",\par
       "      <td>17.0</td>\\n",\par
       "      <td>8</td>\\n",\par
       "      <td>302.0</td>\\n",\par
       "      <td>140</td>\\n",\par
       "      <td>3449</td>\\n",\par
       "      <td>10.5</td>\\n",\par
       "      <td>70</td>\\n",\par
       "      <td>1</td>\\n",\par
       "      <td>ford torino</td>\\n",\par
       "    </tr>\\n",\par
       "  </tbody>\\n",\par
       "</table>\\n",\par
       "</div>"\par
      ],\par
      "text/plain": [\par
       "    mpg  cylinders  displacement  horsepower  weight  acceleration  \\{{\field{\*\fldinst{HYPERLINK "\\\\\\\\n"}}{\fldrslt{\\\\n\ul0\cf0}}}}\f1\fs22 ",\par
       "0  18.0          8         307.0         130    3504          12.0   \\n",\par
       "1  15.0          8         350.0         165    3693          11.5   \\n",\par
       "2  18.0          8         318.0         150    3436          11.0   \\n",\par
       "3  16.0          8         304.0         150    3433          12.0   \\n",\par
       "4  17.0          8         302.0         140    3449          10.5   \\n",\par
       "\\n",\par
       "   model year  origin                   car name  \\n",\par
       "0          70       1  chevrolet chevelle malibu  \\n",\par
       "1          70       1          buick skylark 320  \\n",\par
       "2          70       1         plymouth satellite  \\n",\par
       "3          70       1              amc rebel sst  \\n",\par
       "4          70       1                ford torino  "\par
      ]\par
     \},\par
     "execution_count": 5,\par
     "metadata": \{\},\par
     "output_type": "execute_result"\par
    \}\par
   ],\par
   "source": [\par
    "#Reading The Dataset\\n",\par
    "\\n",\par
    "datas = pd.read_csv(r\\"C:{{\field{\*\fldinst{HYPERLINK "\\\\\\\\Users\\\\\\\\sunda\\\\\\\\Desktop\\\\\\\\IBM\\\\\\\\car performance.csv\\\\"}}{\fldrslt{\ul\cf1\\\\Users\\\\sunda\\\\Desktop\\\\IBM\\\\car performance.csv\\")\\n}}}}\f1\fs22 ",\par
    "datas.head()"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 6,\par
   "id": "e7951ac9",\par
   "metadata": \{\},\par
   "outputs": [\par
    \{\par
     "data": \{\par
      "text/plain": [\par
       "mpg             False\\n",\par
       "cylinders       False\\n",\par
       "displacement    False\\n",\par
       "horsepower      False\\n",\par
       "weight          False\\n",\par
       "acceleration    False\\n",\par
       "model year      False\\n",\par
       "origin          False\\n",\par
       "car name        False\\n",\par
       "dtype: bool"\par
      ]\par
     \},\par
     "execution_count": 6,\par
     "metadata": \{\},\par
     "output_type": "execute_result"\par
    \}\par
   ],\par
   "source": [\par
    "# Handling Missing Values\\n",\par
    "\\n",\par
    "datas.isnull().any()"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 7,\par
   "id": "bc284339",\par
   "metadata": \{\},\par
   "outputs": [],\par
   "source": [\par
    "# Splitting The Dataset Into Dependent And Independent Variable.\\n",\par
    "\\n",\par
    "x = datas.iloc[:,1:8].values"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 8,\par
   "id": "305c25fa",\par
   "metadata": \{\},\par
   "outputs": [],\par
   "source": [\par
    "y = datas.iloc[:,0].values"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 9,\par
   "id": "f66bc5a7",\par
   "metadata": \{\},\par
   "outputs": [],\par
   "source": [\par
    "# Split The Dataset Into Train Set And Test Set\\n",\par
    "\\n",\par
    "from sklearn.model_selection import train_test_split\\n",\par
    "x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 10,\par
   "id": "d03ea4e8",\par
   "metadata": \{\},\par
   "outputs": [],\par
   "source": [\par
    "# Normalizing\\n",\par
    "\\n",\par
    "from sklearn.preprocessing import StandardScaler\\n",\par
    "sd = StandardScaler()\\n",\par
    "x_train = sd.fit_transform(x_train)\\n",\par
    "x_test = sd.fit_transform(x_test)"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 11,\par
   "id": "1b1a68a8",\par
   "metadata": \{\},\par
   "outputs": [\par
    \{\par
     "data": \{\par
      "text/plain": [\par
       "array([[ 1.49526939,  1.22961301,  1.24359144, ..., -0.79520768,\\n",\par
       "        -1.13752513, -0.73301171],\\n",\par
       "       [-0.85285735, -0.92367663, -1.16092059, ...,  1.24411524,\\n",\par
       "        -1.41177304,  0.5068698 ],\\n",\par
       "       [-0.85285735, -0.92367663, -0.68001818, ...,  0.05760009,\\n",\par
       "         1.05645814,  0.5068698 ],\\n",\par
       "       ...,\\n",\par
       "       [-0.85285735, -1.206235  , -1.45480539, ...,  1.42950823,\\n",\par
       "        -0.86327722,  0.5068698 ],\\n",\par
       "       [ 0.32120602,  0.56706235, -0.09224857, ..., -0.2390287 ,\\n",\par
       "        -1.41177304, -0.73301171],\\n",\par
       "       [-0.85285735, -0.99188037, -0.86703579, ...,  0.31715028,\\n",\par
       "        -0.31478141,  0.5068698 ]])"\par
      ]\par
     \},\par
     "execution_count": 11,\par
     "metadata": \{\},\par
     "output_type": "execute_result"\par
    \}\par
   ],\par
   "source": [\par
    "x_train"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 12,\par
   "id": "c9ca3c4c",\par
   "metadata": \{\},\par
   "outputs": [\par
    \{\par
     "data": \{\par
      "text/plain": [\par
       "RandomForestRegressor(n_estimators=30, random_state=0)"\par
      ]\par
     \},\par
     "execution_count": 12,\par
     "metadata": \{\},\par
     "output_type": "execute_result"\par
    \}\par
   ],\par
   "source": [\par
    "# Build The Model With The Random Forest Regressor\\n",\par
    "\\n",\par
    "from sklearn.ensemble import RandomForestRegressor\\n",\par
    "d = RandomForestRegressor (n_estimators=30,random_state = 0)\\n",\par
    "d.fit(x_train,y_train)"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 13,\par
   "id": "fc9ed937",\par
   "metadata": \{\},\par
   "outputs": [\par
    \{\par
     "data": \{\par
      "text/plain": [\par
       "array([14.38333333, 24.25666667, 14.21666667, 20.56666667, 18.47333333,\\n",\par
       "       30.21666667, 34.63333333, 21.15      , 16.30333333, 25.76      ,\\n",\par
       "       36.60333333, 36.27      , 19.53666667, 27.32333333, 16.54333333,\\n",\par
       "       32.99333333, 28.32333333, 27.49666667, 17.03      , 35.82      ,\\n",\par
       "       16.47333333, 23.54      , 23.16666667, 20.7       , 33.69666667,\\n",\par
       "       26.45      , 33.79666667, 30.37333333, 31.93666667, 16.57333333,\\n",\par
       "       20.26666667, 32.99      , 19.79666667, 34.08333333, 20.85666667,\\n",\par
       "       25.02      , 19.65333333, 17.14      , 34.78333333, 12.76666667,\\n",\par
       "       13.73333333, 15.2       , 28.32      , 32.76666667, 28.74333333,\\n",\par
       "       22.68666667, 20.54333333, 16.50666667, 23.38      , 29.88333333,\\n",\par
       "       34.31666667, 26.5       , 17.63      , 27.78333333, 15.96666667,\\n",\par
       "       12.96666667, 18.86666667, 26.91666667, 31.95666667, 15.68      ,\\n",\par
       "       20.81      , 25.97      , 19.84666667, 21.6       , 13.46666667,\\n",\par
       "       15.33333333, 14.2       , 18.90333333, 24.72666667, 14.21666667,\\n",\par
       "       34.87666667, 13.25      , 22.96666667, 18.77666667, 23.83333333,\\n",\par
       "       32.16666667, 28.17666667, 31.23666667, 31.94      , 14.35      ])"\par
      ]\par
     \},\par
     "execution_count": 13,\par
     "metadata": \{\},\par
     "output_type": "execute_result"\par
    \}\par
   ],\par
   "source": [\par
    "# prediction\\n",\par
    "\\n",\par
    "y_pred = d.predict(x_test)\\n",\par
    "y_pred"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 14,\par
   "id": "acedab46",\par
   "metadata": \{\},\par
   "outputs": [\par
    \{\par
     "data": \{\par
      "text/plain": [\par
       "0.8914224071232417"\par
      ]\par
     \},\par
     "execution_count": 14,\par
     "metadata": \{\},\par
     "output_type": "execute_result"\par
    \}\par
   ],\par
   "source": [\par
    "# Model Evaluation\\n",\par
    "\\n",\par
    "from sklearn.metrics import r2_score\\n",\par
    "accuracy = r2_score(y_test,y_pred)\\n",\par
    "accuracy"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": 17,\par
   "id": "8c67e411",\par
   "metadata": \{\},\par
   "outputs": [],\par
   "source": [\par
    "# save the model\\n",\par
    "\\n",\par
    "import pickle\\n",\par
    "pickle.dump(d,open('regression.pkl','wb'))"\par
   ]\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": null,\par
   "id": "74a9e041",\par
   "metadata": \{\},\par
   "outputs": [],\par
   "source": []\par
  \},\par
  \{\par
   "cell_type": "code",\par
   "execution_count": null,\par
   "id": "a78d01ab",\par
   "metadata": \{\},\par
   "outputs": [],\par
   "source": []\par
  \}\par
 ],\par
 "metadata": \{\par
  "kernelspec": \{\par
   "display_name": "Python 3 (ipykernel)",\par
   "language": "python",\par
   "name": "python3"\par
  \},\par
  "language_info": \{\par
   "codemirror_mode": \{\par
    "name": "ipython",\par
    "version": 3\par
   \},\par
   "file_extension": ".py",\par
   "mimetype": "text/x-python",\par
   "name": "python",\par
   "nbconvert_exporter": "python",\par
   "pygments_lexer": "ipython3",\par
   "version": "3.9.12"\par
  \}\par
 \},\par
 "nbformat": 4,\par
 "nbformat_minor": 5\par
\}\f0\lang9\par
}
 