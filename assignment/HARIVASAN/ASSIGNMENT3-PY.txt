import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator

#Augmenting the input training images
train datagen = ImageDataGenerator (
rescale=1./255,
shear range=0.2,
zoom_range=0.2,
horizontal _flip=True)

training set = train _datagen.flow from directory (
'training',
target_size=(64, 64),
batch _size=32,
class mode='categorical')
Found 4103 images belonging to 5 classes.
test_datagen = ImageDataGenerator (
rescale=1./255)

test_data = test_datagen.flow from directory (
'Testing',
target_size=(64, 64),
batch _size=32,
class mode='categorical')
Found 214 images belonging to 5 classes.

#Building the model
cnn = tf. keras.models.Sequential ()

#Adding convolution layer
cnn.add(tfi.keras.layers.Conv2D (filters=64,kernel size=3,activation
="relu",input_shape =[64, 64,3]))

cnn.add(tf.keras.layers.MaxPool2D (pool size = 2,strides=2) )
cnn.add(tfi.keras.layers.Conv2D (filters=64,kernel size=3,activation
="relu") )

cnn.add(tf.keras.layers.MaxPool2D (pool size = 2,strides=2) )
cnn.add(tfi.keras.layers.Dropout (0.5) )

# Flattening the layers
cnn.add(tf.keras.layers.Flatten() )

# Adding dense layers (Hidden Layers)
cnn.add(tf.keras.layers.Dense(units=128 ,activation ="relu") )
cnn.add(tf.keras.layers.Dense (units=5,activation="softmax") )

#compilation of the neural network model
cnn.compile (optimizer="rmsprop", loss="categorical _crossentropy‚Äù ,metrics

=["accuracy"] )

#Fitting the neural network model and training it

cnn.fit(x = training set , validation_data =test_data , epochs =
Epoch 1/30

129/129 [Sssssssssssssssssssssssss=====] - 3483 254ms/step - loss:
- accuracy: 0.4350 - val_loss: 1.0596 - val_accuracy: 0.6168
Epoch 2/30

129/129 [Sssssssssssssssssssssss=======] - 338 253ms/step - loss:
- accuracy: 0.5659 - val_loss: 1.1546 - val_accuracy: 0.6168
Epoch 3/30

129/129 [Sssssssssssssssesssssss=======] - 368 279ms/step - loss:
- accuracy: 0.6176 - val_loss: 1.0383 - val_accuracy: 0.5841
Epoch 4/30

129/129 [Ssssssssssssssssssssssss======] - 378 285ms/step - loss:
- accuracy: 0.6432 - val_loss: 0.8612 - val_accuracy: 0.6776
Epoch 5/30

129/129 [Ssssssssssssssssssssssss======] - 378 289ms/step - loss:
- accuracy: 0.6727 - val_loss: 1.1994 - val_accuracy: 0.5514
Epoch 6/30

129/129 [Sssssssssssssssssssssssss=====] - 418s 315ms/step - loss:
- accuracy: 0.6856 - val_loss: 0.9825 - val_accuracy: 0.6916
Epoch 7/30

129/129 [Ssssssssssssssssssssssss======] - 378 285ms/step - loss:
- accuracy: 0.7002 - val_loss: 0.9143 - val_accuracy: 0.6636
Epoch 8/30

129/129 [Ssssssssssssssssssssssss======] - 368 280ms/step - loss:
- accuracy: 0.7090 - val_loss: 0.8084 - val_accuracy: 0.7243
Epoch 9/30

129/129 [Sssssssssssssssssssssss=======] - 338 257ms/step - loss:
- accuracy: 0.7187 - val_loss: 0.8042 - val_accuracy: 0.7150
Epoch 10/30

129/129 [Sssssssssssssssssssssssss=====] - 328 250ms/step - loss:
- accuracy: 0.7387 - val_loss: 0.9286 - val_accuracy: 0.6589
Epoch 11/30

129/129 [Ssssssssssssssssssssssss======] - 353 273ms/step - loss:
- accuracy: 0.7453 - val_loss: 1.0362 - val_accuracy: 0.6822
Epoch 12/30

129/129 [Sssssssssssssssesssssss=======] - 353 270ms/step - loss:
- accuracy: 0.7534 - val_loss: 0.7733 - val_accuracy: 0.7056
Epoch 13/30

129/129 [Sssssssssssssssesssssssss=====] - 343s 261ms/step - loss:
- accuracy: 0.7655 - val_loss: 0.8955 - val_accuracy: 0.6916
Epoch 14/30

129/129 [Sssssssssssssssessssssss======] - 378 284ms/step - loss:
- accuracy: 0.7702 - val_loss: 0.9361 - val_accuracy: 0.6542
Epoch 15/30

129/129 [Sssssssssssssssesssssss=======] - 368 279ms/step - loss:
- accuracy: 0.7780 - val_loss: 0.8789 - val_accuracy: 0.6916
Epoch 16/30

129/129 [Sssssssssssssssesssssss=======] - 368 281ms/step - loss:
- accuracy: 0.7775 - val_loss: 0.9812 - val_accuracy: 0.6729

30

- 3400

-0957

- 9823

-9194

-8707

-8155

- 7836

- 7603

~ 7361

- 6901

-6722

- 6659

- 6291

-6128

-9988

-9822
Epoch 17/30

129/129 [Ssssssssssssssssssssssss======] - 38s 298ms/step - loss:
- accuracy: 0.7870 - val_loss: 0.8973 - val_accuracy: 0.7056
Epoch 18/30

129/129 [Ssssssssssssssssssssssss======] - 408s 306ms/step - loss:
- accuracy: 0.7875 - val_loss: 0.8542 - val_accuracy: 0.7056
Epoch 19/30

129/129 [Sssssssssssssssessssssss======] - 39s 305ms/step - loss:
- accuracy: 0.7955 - val_loss: 0.7468 - val_accuracy: 0.7430
Epoch 20/30

129/129 [Sssssssssssssssessssssss======] - 39s 303ms/step - loss:
- accuracy: 0.7919 - val_loss: 0.8988 - val_accuracy: 0.7150
Epoch 21/30

129/129 [Sssssssssssssssssssssssss=====] - 433 329ms/step - loss:
- accuracy: 0.8040 - val_loss: 1.0677 - val_accuracy: 0.6963
Epoch 22/30

129/129 [Sssssssssssssssessssssss======] - 38s 296ms/step - loss:
- accuracy: 0.8172 - val_loss: 0.8774 - val_accuracy: 0.7243
Epoch 23/30

129/129 [Sssssssssssssssessssssss======] - 39s 302ms/step - loss:
- accuracy: 0.8172 - val_loss: 0.8348 - val_accuracy: 0.6963
Epoch 24/30

129/129 [Sssssssssssssssssssssssss=====] - 453 348ms/step - loss:
- accuracy: 0.8153 - val_loss: 0.9380 - val_accuracy: 0.6916
Epoch 25/30

129/129 [Sssssssssssssssssssssssss=====] - 443 342ms/step - loss:
- accuracy: 0.8284 - val_loss: 0.9572 - val_accuracy: 0.7056
Epoch 26/30

129/129 [Sssssssssssssssssssssssss=====] - 418s 318ms/step - loss:
- accuracy: 0.8360 - val_loss: 0.8506 - val_accuracy: 0.7056
Epoch 27/30

129/129 [Sssssssssssssssessssssss======] - 39s 302ms/step - loss:
- accuracy: 0.8216 - val_loss: 1.2935 - val_accuracy: 0.6168
Epoch 28/30

129/129 [Ssssssssssssssssssssssss======] - 39s 300ms/step - loss:
- accuracy: 0.8272 - val_loss: 0.8751 - val_accuracy: 0.6869
Epoch 29/30

129/129 [Sssssssssssssssessssssss======] - 378s 290ms/step - loss:
- accuracy: 0.8372 - val_loss: 0.9651 - val_accuracy: 0.6729
Epoch 30/30

129/129 [Sssssssssssssssssssssssss=====] - 39s 299ms/step - loss:
- accuracy: 0.8501 - val_loss: 1.0778 - val_accuracy: 0.6963
<keras.callbacks.History at 0x2bf28ab59b0>

cnn.fit(x = training set , validation_data =test_data , epochs =
Epoch 1/30

129/129 [Sssssssssssssssssssssssss=====] - 453 347ms/step - loss:
- accuracy: 0.8496 - val_loss: 0.9867 - val_accuracy: 0.6729
Epoch 2/30

129/129 [Sssssssssssssssssssssssss=====] - 443 341ms/step - loss:
- accuracy: 0.8469 - val_loss: 1.0115 - val_accuracy: 0.7056
Epoch 3/30

129/129 [Sssssssssssssssesssssssss=====] - 443 341ms/step - loss:
- accuracy: 0.8550 - val_loss: 0.8851 - val_accuracy: 0.7150

Epoch 4/30

30

-9802

-9724

-9624

-9542

-9241

-9146

-9153

-9067

-4726

-4762

-4734

-4611

- 4375

-4292

- 4250

-4170

- 4203
129/129 [ SSSSSSS SSS SSS SSS SS SSS SSS 5555 ==] - 44s 341ms/step - loss:

- accuracy: 8513 val_loss -1110 - val_accuracy: 0.6916
Epoch 5/30

129/129 [Ssssssssssssssssssssssss======] - 408s 309ms/step - loss:
- accuracy: 8603 val _ loss -2546 - val_accuracy: 0.7103
Epoch 6/30

129/129 [Sssssssssssssssssssssssss=====] - 428 327ms/step - loss:
- accuracy: 8630 val _ loss -9946 - val_accuracy: 0.6916
Epoch 7/30

129/129 [Sssssssssssssssssssssssss=====] - 418 313ms/step - loss:
- accuracy: 8640 val_loss -0004 - val_accuracy: 0.7243
Epoch 8/30

129/129 [Sssssssssssssssssssssssss=====] - 428 324ms/step - loss:
- accuracy: 8655 val _ loss -0725 - val_accuracy: 0.6916
Epoch 9/30

129/129 [Sssssssssssssssssssssssss=====] - 418s 319ms/step - loss:
- accuracy: 8582 val_loss -0544 - val_accuracy: 0.6916
Epoch 10/30

129/129 [Sssssssssssssssssssssss=s=====] - 423 327ms/step - loss:
- accuracy: 8652 val_loss -9719 - val_accuracy: 0.6963
Epoch 11/30

129/129 [Sssssssssssssssssssssssss=====] - 428 326ms/step - loss:
- accuracy: 8686 val_loss -9270 - val_accuracy: 0.7336
Epoch 12/30

129/129 [Sssssssssssssssssssssssss=====] - 433 334ms/step - loss:
- accuracy: 8647 val_loss -9987 - val_accuracy: 0.7196
Epoch 13/30

129/129 [Sssssssssssssssssssssssss=====] - 443 338ms/step - loss:
- accuracy: 8718 val_loss -8642 - val_accuracy: 0.7196
Epoch 14/30

129/129 [Sssssssssssssssssssssssss=====] - 443 339ms/step - loss:
- accuracy: 8786 val_loss -1820 - val_accuracy: 0.6822
Epoch 15/30

129/129 [Sssssssssssssssesssssss=======] - 508s 390ms/step - loss:
- accuracy: 8762 val _ loss -0773 - val_accuracy: 0.7150
Epoch 16/30

129/129 [Sssssssssssssssssssssssss=====] - 418s 315ms/step - loss:
- accuracy: 8852 val_loss -3577 - val_accuracy: 0.7009
Epoch 17/30

129/129 [Sssssssssssssssssssssss=======] - 68s 527ms/step - loss:
- accuracy: 8796 val_loss -0770 - val_accuracy: 0.7150
Epoch 18/30

129/129 [Sssssssssssssssesssssssss=====] - 638 477ms/step - loss:
- accuracy: 8755 val _ loss -9273 - val_accuracy: 0.7243
Epoch 19/30

129/129 [Sssssssssssssssessssssss======] - 70s 539ms/step - loss:
- accuracy: 8835 val _ loss -1471 - val_accuracy: 0.6776
Epoch 20/30

129/129 [Sssssssssssssssssssssssss=====] - 71s 548ms/step - loss:
- accuracy: 8869 val_loss -1275 - val_accuracy: 0.7103
Epoch 21/30

129/129 [Sssssssssssssssessssssss======] - 77s 599ms/step - loss:
- accuracy: 8864 val _ loss -2780 - val_accuracy: 0.6963

Epoch 22/30

-4077

- 3930

-4018

- 3879

-3729

-3805

~3742

~3737

- 3898

-3701

- 3546

-3510

3433

- 3400

-3444

- 3386

- 3300

- 3330
129/129 [Sssssssssssssssesssssssss=====] - 668s 515ms/step - loss: 0.3249
- accuracy: 0.8867 - val_loss: 1.0580 - val_accuracy: 0.7056

Epoch 23/30

129/129 [Sssssssssssssssesssssssss=====] - 828s 622ms/step - loss: 0.3225
- accuracy: 0.8903 - val_loss: 1.2799 - val_accuracy: 0.7383

Epoch 24/30

129/129 [Sssssssssssssssesssssss=======] - 101s 785ms/step - loss: 0.3164
- accuracy: 0.8884 - val_loss: 1.3724 - val_accuracy: 0.7056

Epoch 25/30

129/129 [Ssssssssssssssssssssssss======] - 508s 382ms/step - loss: 0.3218
- accuracy: 0.8945 - val_loss: 1.2431 - val_accuracy: 0.7009

Epoch 26/30

129/129 [Sssssssssssssssesssssssss=====] - 61s 469ms/step - loss: 0.3212
- accuracy: 0.8945 - val_loss: 0.9750 - val_accuracy: 0.7056

Epoch 27/30

129/129 [Sssssssssssssssssssssssss=====] - 111s 851ms/step - loss: 0.3087
- accuracy: 0.9020 - val_loss: 1.4106 - val_accuracy: 0.7056

Epoch 28/30

129/129 [Ssssssssssssessesssssssss=====] - 61s 466ms/step - loss: 0.3077
- accuracy: 0.8935 - val_loss: 0.9878 - val_accuracy: 0.7243

Epoch 29/30

129/129 [Sssssssssssssssesssssssss=====] - 59s 458ms/step - loss: 0.3071
- accuracy: 0.8976 - val_loss: 1.1608 - val_accuracy: 0.6963

Epoch 30/30

129/129 [Ssssssssssssessesssssssss=====] - 38s 295ms/step - loss: 0.3014
- accuracy: 0.8913 - val_loss: 1.4083 - val_accuracy: 0.7336
<keras.callbacks.History at Ox2bf223fcfd0>

#preprocess the test image

import numpy as np

image =

tfi.keras.preprocessing.image.load_img ("prediction/tu.jpg",target_size=(64
, 64) )

input_arr = tf.keras.preprocessing.image.img to array (image)
input_arr = np.expand dims (input_arr, axis=0)

result = cnn.predict (input_arr)

V/1 [Sssssssssssssssssssessssss====] - 0s 79ms/step

training set.class indices

{'Daisy': 0, 'Dandelion': 1, ‚Äò'rose': 2, 'sunflower': 3, 'tulip': 4}

print (result)
[[oO. 0. 0. 0. 1.]]

#Mapping the result to the values
if result [0] [0] ==
print ("daisy")
elif result[0][1] == 1:
print ("dandelion")
elif result[0][2] == 1:
print ("rose")
elif result[0][3] ==
print ("suflower")
elif result[0] [4] ==
print ("tulip")
tulip

#Save the model

model.save('image.h5')
